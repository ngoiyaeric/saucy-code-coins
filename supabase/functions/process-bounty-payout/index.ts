import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const { repositoryId, repositoryName, pullRequestNumber, pullRequestId, contributorId, contributorLogin, issueNumber } = await req.json();

    console.log('Processing bounty payout for merged PR:', { 
      repositoryId, 
      pullRequestNumber, 
      contributorId, 
      contributorLogin 
    });

    // Find active bounty for this repository and issue
    const { data: bounty, error: bountyError } = await supabaseClient
      .from('bounties')
      .select('*')
      .eq('repository_id', repositoryId)
      .eq('issue_number', issueNumber)
      .eq('status', 'active')
      .single();

    if (bountyError || !bounty) {
      console.log('No active bounty found for this PR');
      return new Response(JSON.stringify({ 
        success: false, 
        message: 'No active bounty found' 
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Check if payout already exists
    const { data: existingPayout } = await supabaseClient
      .from('payouts')
      .select('id')
      .eq('repository_id', repositoryId)
      .eq('pull_request_number', pullRequestNumber)
      .eq('contributor_id', contributorId)
      .single();

    if (existingPayout) {
      console.log('Payout already exists for this PR and contributor');
      return new Response(JSON.stringify({ 
        success: false, 
        message: 'Payout already exists' 
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Create payout record
    const { data: payout, error: payoutError } = await supabaseClient
      .from('payouts')
      .insert({
        repository_id: repositoryId,
        repository_name: bounty.repository_name,
        pull_request_number: pullRequestNumber,
        pull_request_id: `pr-${pullRequestNumber}`,
        contributor_id: contributorId,
        contributor_name: contributorLogin,
        amount: bounty.amount,
        currency: bounty.currency,
        status: 'pending'
      })
      .select()
      .single();

    if (payoutError) {
      throw new Error(`Failed to create payout: ${payoutError.message}`);
    }

    // Update bounty status to indicate payout is pending
    const { error: bountyUpdateError } = await supabaseClient
      .from('bounties')
      .update({ 
        status: 'pending_payout',
        updated_at: new Date().toISOString()
      })
      .eq('id', bounty.id);

    if (bountyUpdateError) {
      console.error('Error updating bounty status:', bountyUpdateError);
    }

    // Post comment on GitHub PR with claim link
    const claimUrl = `${Deno.env.get('SITE_URL') || 'https://saucy.app'}/claim/${payout.id}`;
    
    await supabaseClient.functions.invoke('github-webhook', {
      body: {
        action: 'post_comment',
        repository_id: repositoryId,
        pull_request_number: pullRequestNumber,
        comment: `ðŸŽ‰ Congratulations @${contributorLogin}! Your merged PR has earned a bounty of ${bounty.amount} ${bounty.currency}.\n\nðŸ’° **Claim your reward here:** ${claimUrl}\n\n_This bounty was automatically generated by Saucy._`
      }
    });

    console.log('Bounty payout created successfully:', payout.id);

    return new Response(JSON.stringify({
      success: true,
      payoutId: payout.id,
      amount: bounty.amount,
      currency: bounty.currency,
      claimUrl: claimUrl
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error processing bounty payout:', error);
    return new Response(JSON.stringify({ 
      error: error.message 
    }), {
      status: 400,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});